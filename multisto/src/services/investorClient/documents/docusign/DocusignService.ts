import {Request, Response} from "express";import logger from "../../../../logger";import {decryptAsync, handleError} from "../../../../modules/common";const request = require('request');// ***********************************************************************************************// --- HELPER FUNCTIONS ---// ***********************************************************************************************const initializeRequest = (url: string, method: string, body: string, email: string, password: string) => {    const options:any = {        "method": method,        "uri": url,        "body": body,        "headers": {}    };    const integratorKey = (global as any).config.DocuSignIntegrationKey;    // JSON formatted authentication header (XML format allowed as well)    // DocuSign authorization header    options.headers["X-DocuSign-Authentication"] = JSON.stringify({        "Username": email,        "Password": password,        "IntegratorKey": integratorKey  // global    });    return options;}const doRequest = (options: any): any =>    // send the request...     new Promise((resolve, reject) => {        request(options, (err: string, res: any, responseBody: string) => {            if (!err && (res.statusCode === 200 || res.statusCode === 201) && responseBody) {                resolve(JSON.parse(responseBody));            } else {                logger.error(`${err} - Error while calling DocuSign webservice - status is: ${res.statusCode}`);                reject(err);            }        });    })// ***********************************************************************************************const loginOnDocusign = async (res:Response, email: string, password: string) => {    // ////////////////////////////////////////////////////////////////////    // Step 1 - Login (used to retrieve accountId and baseUrl)    // ////////////////////////////////////////////////////////////////////    const body = "";  // no request body for login api call    // set request url, method, body, and headers    const linkToDOcuSignLoginServer = (global as any).config.DocuSignlinkToLoginServer;    const options = initializeRequest(linkToDOcuSignLoginServer, "GET", body, email, password);    const response = await doRequest(options)        .catch((e: any) => {            logger.error(`${e} - error occurred in loginOnDocusign`);        });    try{        return response.loginAccounts[0].baseUrl;    } catch (e) {        throw new Error(`${e} - error occurred in loginOnDocusign`);    }}const prefillEnvelope = async (emailSubject: string, templateId: string, investorEmail: string, recipientName: string,                               json: string, baseUrl: string, email: string, password: string, res: Response) => {    // ////////////////////////////////////////////////////////////////////    // Step 2 - Send envelope with one Embedded recipient (using clientUserId property)    // ////////////////////////////////////////////////////////////////////    const jsonParameters = {        "emailSubject": emailSubject,        "templateId": templateId,        "templateRoles": [{            "email": investorEmail,            "name": recipientName,            "roleName": "signer",            "clientUserId": "1201",  // user-configurable  do not remove   necessay otherwise no onpage siging            "tabs": {                "textTabs": json            }        }],        "status": "sent"    };    const url = `${baseUrl}/envelopes`;    const body = JSON.stringify(jsonParameters);    // set request url, method, body, and headers    const options = initializeRequest(url, "POST", body, email, password);    // send the request...    const response = await doRequest(options)        .catch((e: any) => {            logger.error(`${e} - error occurred in prefillEnvelope`);        });    try{        return response.envelopeId;    } catch (e) {        throw new Error(`${e} - error occurred in prefillEnvelope`);    }}const getRecipientView = async (baseUrl: string, envelopeId: string, returnURL: string, investorEmail: string,                                recipientName: string, email: string, password: string, res: Response) => {    // ////////////////////////////////////////////////////////////////////    // Step 3 - Get the Embedded Signing View (aka the recipient view)    // ////////////////////////////////////////////////////////////////////    const url = `${baseUrl}/envelopes/${envelopeId}/views/recipient`;    const body = JSON.stringify({        "returnUrl": `${returnURL}&envelopeId=${envelopeId}`,        "authenticationMethod": "email",        "email": investorEmail,        "userName": recipientName,        "clientUserId": "1201", // must match clientUserId in step 2    do not remove and must be defined above    });    // set request url, method, body, and headers    const options = initializeRequest(url, "POST", body, email, password);    const response = await doRequest(options)        .catch((e: any) => {            logger.error(`${e} - error occurred in getRecipientView`);        });    try{        return response.url;    } catch (e) {       throw new Error(`${e} - error occurred in getRecipientView`);    }}export default class DocusignService {    redirectUserToSigningUrl = async (req: Request, res: Response, json: any, returnURL: string, templateId: string,                                      nameOfRecipient: string, emailSubject: string, investorEmail: string): Promise<any> => {        const globalObj = global as any;        const email = globalObj.config.DocuSignEmail; // your account email        const recipientName = nameOfRecipient; // recipient (signer) name        try{            const password = await decryptAsync(globalObj.config.DocuSignPassword).then((result:any) => result);            const baseUrl = await loginOnDocusign(res, email, password);            const envelopeId = await prefillEnvelope(emailSubject, templateId, investorEmail, recipientName, json,                baseUrl, email, password, res);            const recipientViewUrl = await getRecipientView(                baseUrl, envelopeId, returnURL, investorEmail, recipientName, email, password, res);            if (recipientViewUrl) {                res.redirect(recipientViewUrl);            }        } catch (e) {            logger.error(`${e} - error occurred in DocusignService`);            res.redirect('/error');        }    }}